#[macro_use]
extern crate log;
extern crate env_logger;

extern crate iron;
extern crate bodyparser;

use iron::prelude::*;
use iron::status;

#[derive(Serialize, Deserialize, Debug, Clone)]
struct Point {
    x: i32,
    y: i32,
}

// curl -XPOST localhost:3000/hello --data '{"x":1,"y":2}'
fn handler(req: &mut Request) -> IronResult<Response> {
    println!("Received request to url {}", req.url);

    let body = req.get::<bodyparser::Struct<Point>>();
    match body {
        Ok(Some(point)) => println!("Parsed point: '{:?}'", point),
        Ok(None) => println!("Couldn't parse to point"),
        Err(err) => println!("Error: {:?}", err)
    }

    Ok(Response::with((status::Ok, "Hello World!")))
}

fn main() {
    env_logger::init().unwrap();
    log!("Starting server on localhost:3000");
    Iron::new(handler).http("localhost:3000").unwrap();
}


#[cfg(test)]
mod test {
    #[test]
    fn green_test() {
        assert!(true);
    }

    #[test]
    #[should_panic]
    fn should_panic() {
        assert!(false);
    }
}
